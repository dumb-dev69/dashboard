{"version":3,"file":"static/js/648.3e5c1a68.chunk.js","mappings":"0MAaA,MAAMA,GAAOC,EAAAA,EAAAA,OAAK,IAAM,gCAClBC,GAAUD,EAAAA,EAAAA,OAAK,IAAM,wDAoD3B,QAjDA,SAAqBE,GACjB,MAAMC,EAAwB,UACxBC,GAAwBC,EAAAA,EAAAA,MACxBC,GAAwBC,EAAAA,EAAAA,KACxBC,GAAwBC,EAAAA,EAAAA,OACvBC,EAAQC,IAAeC,EAAAA,EAAAA,UAAS,IAEjCC,GAASC,EAAAA,EAAAA,UAAQ,IAAM,CACzB,CACIC,OAAO,EACPC,SACIC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACD,UAAQ,IAAIE,UACrCJ,EAAAA,EAAAA,KAAClB,EAAI,CAACI,QAASA,OAI3B,CACImB,KAAM,OACNN,SACIC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACD,UAAQ,IAAIE,UACrCJ,EAAAA,EAAAA,KAAChB,EAAO,CAACE,QAASA,SAI/B,IAsBH,OApBAoB,EAAAA,EAAAA,YAAU,KACN,WACI,IACI,MAAMC,QAAiBlB,EAAY,CAAEmB,IAAK,6BAE1C,IAAID,EAAU,OAEdpB,EAAYsB,EAAAA,GAAmBC,WAAW,CACtCC,WAAY,SACZC,QAASL,EAASM,YAAYC,KAAIC,IAAG,IAAUA,EAAK7B,cACpD8B,eAAgBT,EAASU,eAG7BvB,EAAUE,EACd,CAAE,MAAOsB,GACL3B,EAAS,SAAU,CAAE4B,MAAO,CAAEC,OAAQF,EAAIE,OAAQC,KAAMH,EAAII,MAChE,CACH,EAhBD,EAgBI,GACL,CAACnC,EAAYI,EAAUF,EAAaO,KAEhC2B,EAAAA,EAAAA,IAAU9B,EACrB,C","sources":["pages/SourcePages.js"],"sourcesContent":["// Functional Imports\nimport { useState, useMemo } from \"react\";\nimport { useRoutes } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { HeaderSliceActions } from \"../store/header-slice\";\nimport { useEffect, lazy, Suspense } from \"react\";\nimport { useHttpClientWithNavigate } from \"../utility/http-hook\";\nimport { useNavigate } from \"react-router-dom\";\n\n// Components Imports\nimport Loading from \"../componets/Loading/Loading\";\n\n// Componets Imports (Lazy)\nconst Root = lazy(() => import(\"../Apps/Source/Root\"));\nconst ViewAll = lazy(() => import(\"../Apps/Source/ViewAll/ViewAll\"))\n\n\nfunction SourcePages(props){\n    const baseURL               = '/source';\n    const dispatcher            = useDispatch();\n    const sendRequest           = useHttpClientWithNavigate();\n    const navigate              = useNavigate();\n    const [router, setRouter]   = useState([]);\n\n    const routes = useMemo(() => [\n        { \n            index: true, \n            element: (\n                <Suspense fallback={<Loading fallback />}>\n                    <Root baseURL={baseURL} /> \n                </Suspense>\n            )\n        }, \n        {\n            path: 'view',\n            element: (\n                <Suspense fallback={<Loading fallback />}>\n                    <ViewAll baseURL={baseURL} />\n                </Suspense>\n            )\n        }\n    ], []);\n\n    useEffect(() => {\n        (async () => {\n            try{\n                const response = await sendRequest({ url: '/apps/source/app-headers' });\n\n                if(!response) return\n            \n                dispatcher( HeaderSliceActions.setHeaders({ \n                    currentApp: 'Source', \n                    appTabs: response.allowedtabs.map(tab => ({ ...tab, baseURL })),\n                    appPermissions: response.permissions\n                }) );\n\n                setRouter(routes);\n            } catch( err ){\n                navigate('/error', { state: { status: err.status, data: err.msg } });\n            }\n        })();\n    }, [dispatcher, navigate, sendRequest, routes]);\n\n    return useRoutes(router);\n}\n\nexport default SourcePages;"],"names":["Root","lazy","ViewAll","props","baseURL","dispatcher","useDispatch","sendRequest","useHttpClientWithNavigate","navigate","useNavigate","router","setRouter","useState","routes","useMemo","index","element","_jsx","Suspense","fallback","Loading","children","path","useEffect","response","url","HeaderSliceActions","setHeaders","currentApp","appTabs","allowedtabs","map","tab","appPermissions","permissions","err","state","status","data","msg","useRoutes"],"sourceRoot":""}